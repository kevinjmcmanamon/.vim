" NOTES:
"
" TABS:
" :retab converts all existing tabs into spaces
"
" WRAP EXISTING TEXT:
" Visually select the lines of text you want to re-format using:
"
" v
"
" Reformat it using (see :h gq for more details):
"
" gq
"
" PASTE IN COMMAND MODE:
" Use CTRL-R " when entering a command in command mode to paste the current
" paste buffer contents. Substitute:
"   " for a buffer name,
"   % for current filename,
"   / for last search term,
"   + for the X clipboard or a host of other substitutions.
" CTRL-R also works in insert mode
"
" COPY AND PASTE TO SYSTEM CLIPBOARD:
" Can use "+yy to copy a line to the system's clipboard.
" Can use "+p to paste from the system's clipboard.
" Can use :registers to view all the current vim registers
"
" Note that "vim --version" must return a list with +xterm_clipboard enabled
" for this to work.  If it isn't enabled (i.e. -xterm_clipboard), then can
" install vim-gtk (with apt-get), which should then enable it.
"
" RECORDING KEY STROKES FOR REPEAT JOBS:
" (This is most useful for repeated jobs which cannot easily be done with ".")
"
" To start recording, press q in normal mode followed by a letter (a to z).
" That starts recording keystrokes to the specified register. Vim displays
" recording in the status line. Type any normal mode commands, or enter insert
" mode and type text. To stop recording, again press q while in normal mode.
"
" To playback your keystrokes, press @ followed by the letter previously
" chosen. Typing @@ repeats the last playback.
"
" GREP SEARCH:
" Example grep search:
" :grep! -Ri --include=*.{cpp,h,txt} "velocity.linear" .
" Then call :copen (or F5 using the shortcut defined below) to view results in
" the quickfix view
" [Note that the exclamation mark after 'grep' (i.e. :grep!) means that the
" first match found will NOT be automatically opened in a buffer]
"
" COMMENTS:
" gcc comments the current line
" gc<motion> comments the motion
"
" SESSIONS:
" :mksession ~/mysession.vim
"
" Then later you can source that vim file and you'll have your old session
" back:
"
" :source ~/mysession.vim
"
" or open vim with the -S option:
"
" $ vim -S ~/mysession.vim
"
" TURN OFF AUTO INDENT WHEN PASTING INTO VIM:
"
" (Note that the F10 shortcut defined below can also be used)
" To turn off autoindent when you paste code, there's a special "paste" mode. Type:
"
" :set paste
"
" Then paste your code. Note that the text in the tooltip now says -- INSERT (paste) --.
" After you pasted your code, turn off the paste-mode, so that auto-indenting when you type works correctly again.
"
" :set nopaste
"
" LISTING AND SWITCHING BUFFERS:
"
" (Note that the F6 shortcut defined below can also be used)
" To list all open buffers:
"
" :ls
"
" Then to switch to a specific buffer:
"
" :bu
"
" followed by the name or number of the buffer
"
" CHANGING TEXT CASE:
"
" You can change the case of text:
"
"     Toggle case "HellO" to "hELLo" with g~ then a movement.
"     Uppercase "HellO" to "HELLO" with gU then a movement.
"     Lowercase "HellO" to "hello" with gu then a movement.
"
" Alternatively, you can visually select text then press ~ to toggle case, or U
" to convert to uppercase, or u to convert to lowercase.
"
" CHANGING SURROUNDINGS:
"
" With vim-surround plugin.
" ds" (delete surrounding) will delete the surrounding double-quotes.
" cs)' (change surrounding) will change surrounding () to single-quotes.
" ys<motion>] (you surround) will surround the given motion with [].
" yss> (you surround single line) will surround the current line with <>.
" In visual mode, an S with an argument wraps the selection.
"
" MOVING CURSOR IN SCREEN:
"
" zz: puts current cursor to middle of screen
" zt: puts current cursor to top of screen
" zb: puts current cursor to bottom of screen
"
" MARKS:
"
" To set a mark, type m followed by a letter. For example, ma sets mark a at
" the current position (line and column).
"
" To jump to a mark enter an apostrophe (') or backtick (`) followed by a
" letter. Using an apostrophe jumps to the beginning of the line holding the
" mark, while a backtick jumps to the line and column of the mark.
"
" Lower case marks only apply to the current buffer.
" Upper case marks will jump to the file and the position holding the mark.
"
" ma         set mark a at current cursor location
" 'a         jump to line of mark a (first non-blank character in line)
" `a         jump to position (line and column) of mark a
" d'a        delete from current line to line of mark a
" d`a        delete from current cursor position to position of mark a
" c'a        change text from current line to line of mark a
" y`a        yank text to unnamed buffer from cursor to position of mark a
" :marks     list all the current marks
" :marks aB  list marks a, B

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'scrooloose/nerdTree'
Plugin 'bling/vim-airline'
Plugin 'majutsushi/tagbar'
Plugin 'Valloric/YouCompleteMe'
" Plugin 'vim-syntastic/syntastic'
Plugin 'altercation/vim-colors-solarized'
Plugin 'easymotion/vim-easymotion'
Plugin 'kien/rainbow_parentheses.vim'
Plugin 'bronson/vim-trailing-whitespace'
Plugin 'rdnetto/YCM-Generator'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-speeddating'
Plugin 'henrik/vim-indexed-search'
Plugin 'kana/vim-operator-user'
Plugin 'haya14busa/vim-operator-flashy'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'terryma/vim-smooth-scroll'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'airblade/vim-gitgutter'
Plugin 'osyo-manga/vim-over'
Plugin 'vimwiki/vimwiki'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" -----------------------------------------------------------------------------
" GENERAL VIM SETTINGS
" -----------------------------------------------------------------------------

" This option forces Vim to source .vimrc file if it present in working
" directory, thus providing a place to store project-specific configuration.

" Since Vim will source .vimrc from any directory you run Vim from, this is a
" potential security hole; so, you should consider setting secure option.
" This option will restrict usage of some commands in non-default .vimrc files;
" commands that write to file or execute shell commands are not allowed and map
" commands are displayed.
set exrc
set secure

" set leader key to be space:
let mapleader = " "

" show current command at bottom of screen:
set showcmd

" Highlight all search pattern matches
set hlsearch

" Ignore case when searching for patterns
set ignorecase

" Show line at specified column (e.g. column 80)
set colorcolumn=80
highlight ColorColumn ctermbg=7 guibg=lightgrey

" Show line numbers by default
set number

" Use relative line numbering
set rnu

" set up TAB settings
filetype plugin indent on
" show existing tab with 2 spaces width
set tabstop=2
" when indenting with '>', use 2 spaces width
set shiftwidth=2
" On pressing tab, insert 2 spaces
set expandtab

" remap Y to copy from cursor to end of the line (similar to 'C' and 'D')
nnoremap <silent> <S-y> y$

" Turn on spell checker by default
set spell

" show all tabs as >----
set list
set listchars=tab:>-

" This trigger takes advantage of the fact that the quickfix window can be
" easily distinguished by its file-type, qf. The wincmd J command is
" equivalent to the Ctrl+W, Shift+J shortcut telling Vim to move a window to
" the very bottom (see :help :wincmd and :help ^WJ).
autocmd FileType qf wincmd J

" This section stops the switch buffer commands (:bn :bp) from showing the
" quickfix window
augroup qf
   autocmd!
   autocmd FileType qf set nobuflisted
augroup END

" Under default settings, making changes and then opening a new file will display
"     E37: No write since last change (add ! to override)
" Typing :set hidden will change this behaviour
" With :set hidden, opening a new file when the current buffer has unsaved changes
" causes files to be hidden instead of closed. Also helps to preserve undo
" history within a buffer.
set hidden

" To use ctrl-^ to toggle "caps lock" in vim (rather than using system caps).
" Execute 'lnoremap x X' and 'lnoremap X x' for each letter a-z.
" (http://vim.wikia.com/wiki/Insert-mode_only_Caps_Lock)
for c in range(char2nr('A'), char2nr('Z'))
    execute 'lnoremap ' . nr2char(c+32) . ' ' . nr2char(c)
    execute 'lnoremap ' . nr2char(c) . ' ' . nr2char(c+32)
endfor

" Kill the capslock when leaving insert mode.
autocmd InsertLeave * set iminsert=0

" In quickfix view, allow same shortcuts as in NERDTree to open and preview
" files in the main window or in splits:
" o: open
" go: preview
" i: open split
" gi: preview split
" s: open vsplit
" gs: preview vsplit
autocmd BufReadPost quickfix nnoremap <buffer> o <CR>
autocmd BufReadPost quickfix nnoremap <buffer> go <CR><bar>:copen<CR>

autocmd BufReadPost quickfix nnoremap <buffer> i <CR><C-W>S<bar>:b#<cr><bar><C-W>j
autocmd BufReadPost quickfix nnoremap <buffer> gi <CR><C-W>S<bar>:b#<cr><bar>:copen<CR>

autocmd BufReadPost quickfix nnoremap <buffer> s <CR><bar>:vsplit<CR><bar>:b#<cr><bar><C-W>l
autocmd BufReadPost quickfix nnoremap <buffer> gs <CR><bar>:vsplit<CR><bar>:b#<cr><bar>:copen<CR>

" Add shortcut to quickly clear search highlighting by pressing Return, without
" turning off search highlighting for subsequent searches (also resets
" case-insensitive searching)
nnoremap <CR> :noh<CR> :set ic<CR><CR>

" set lazy redraw (speeds up scrolling and macro playback)
set lazyredraw

" remap Escape key to jk and kj to make it far quicker to return to normal mode
imap jk <Esc>
imap kj <Esc>

" set default grep options:
set grepprg=grep\ -nH\ $MY_GREP_OPTIONS

" By default, when calling grep, use shebang to stop vim opening file
" automatically.
" The (getcmdtype()==':' && getcmdpos()) makes sure the replacement happens
" only if using ':grep' (and not, for example, '/grep').
cabbrev grep <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'grep!' : 'grep')<CR>

" -----------------------------------------------------------------------------
" FUNCTION KEYS
" -----------------------------------------------------------------------------

" YouCompleteMe mappings
nnoremap <F2> :YcmCompleter GoToDeclaration<CR>
nnoremap <F3> :YcmCompleter GoTo<CR>
nnoremap <F4> :YcmCompleter GetDoc<CR>

" map toggling of quickfix view to F5
map <silent> <F5> :copen<CR>
autocmd BufReadPost quickfix nnoremap <buffer> <F5> :ccl<CR>

" When F6 is pressed, a numbered list of buffer names is printed, and the user
" needs to type a single number based on the "menu" and press enter to switch
" to that buffer
:nnoremap <F6> :buffers<CR>:buffer<Space>

" map finding of file in NERDTree to F7
map <silent> <F7> :NERDTreeFind<CR>

" map toggling of NERDTree to F8
map <silent> <F8> :NERDTreeToggle<CR>

" map toggling of tagbar to F9
map <silent> <F9> :TagbarToggle<CR>

" shortcut F10 for toggling paste and nopaste:
set pastetoggle=<F10>

" -----------------------------------------------------------------------------
" LEADER KEY USES
" -----------------------------------------------------------------------------

" nice way to close the current buffer
nnoremap <leader>x :bp\|bd #<CR>

" Add shortcut "<leader>-p" to change the current word with the current yanked text
:map <leader>p "_cw<C-r>"<ESC>

" remap keys to easily switch between buffers
nnoremap <silent> <leader>h :bp<CR>
nnoremap <silent> <leader>l :bn<CR>

" map leader-h and leader-l to move to previous older and newer quickfix views.
autocmd BufReadPost quickfix nnoremap <buffer> <leader>h :col<CR>
autocmd BufReadPost quickfix nnoremap <buffer> <leader>l :cnew<CR>

" Added shortcuts to quickly size vim windows
nnoremap <leader>wj <C-W>5+
nnoremap <leader>wk <C-W>5-
nnoremap <leader>wh <C-W>5<
nnoremap <leader>wl <C-W>5>

" Shortcut for copying and pasting to/from the system buffer
nnoremap <leader>; "+

" set shortcut to search for the word currently under the cursor in the
" current working directory:
nnoremap <leader>s :execute 'grep! -Ri <cword>' fnameescape(getcwd())<CR>

" add shortcut to reload vimrc without restarting vim:
nnoremap <leader>v :so ~/.vimrc<CR>

" Easymotion shortcut
map <Leader> <Plug>(easymotion-prefix)
nmap <leader><leader> <Plug>(easymotion-bd-w)

" Set so that <leader>c sets 'no ignore case' to perform case sensitive
" searches.  <leader>c would typically be called before using *, #, /, ?, or
" :%s commands to carry out case sensitive searching.
nnoremap <leader>c :set noic<CR>

" -----------------------------------------------------------------------------
" CTRL-P
" -----------------------------------------------------------------------------

set runtimepath^=~/.vim/bundle/ctrlp.vim
set wildignore+=*/devel/*,*/build/*,*/.git/*,*.so

" w - begin finding a root from the current working directory outside of CtrlP
"     instead of from the directory of the current file (default). Only applies
"     when "r" is also present.
let g:ctrlp_working_path_mode = 'rw'

" -----------------------------------------------------------------------------
" TAGBAR
" -----------------------------------------------------------------------------

" prevent tagbar from moving to another buffer from its window
autocmd FileType tagbar noremap <buffer> <leader>h <nop>
autocmd FileType tagbar noremap <buffer> <leader>l <nop>

" -----------------------------------------------------------------------------
" NERDTree
" -----------------------------------------------------------------------------

" Launch NERDtree automatically
"autocmd vimenter * NERDTree

" Jump to the main window.
"autocmd VimEnter * wincmd p

" prevent nerdtree from moving to another buffer from its window
autocmd FileType nerdtree noremap <buffer> <leader>h <nop>
autocmd FileType nerdtree noremap <buffer> <leader>l <nop>

" Set vim's current working directory based on the current NERDTree working
" directory
let g:NERDTreeChDirMode = 2

" Set NERDTree arrows to be simple characters (avoids problems on systems that
" can't display unicode):
let g:NERDTreeDirArrowExpandable = '+'
let g:NERDTreeDirArrowCollapsible = '-'

" -----------------------------------------------------------------------------
" SOLARIZED
" -----------------------------------------------------------------------------

" Settings for solarized (colourscheme)
syntax enable

" the term and t_ut options help vim work better inside tmux
set term=xterm-256color
set t_ut=
set background=dark
let g:solarized_termcolors=256
colorscheme solarized

" -----------------------------------------------------------------------------
" RAINBOW PARENTHESES
" -----------------------------------------------------------------------------

" Turn on rainbow parentheses by default
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" -----------------------------------------------------------------------------
" VIM AIRLINE
" -----------------------------------------------------------------------------

" Enable vim-airline
let g:airline#extensions#tabline#enabled = 1


" -----------------------------------------------------------------------------
" YOU COMPLETE ME
" -----------------------------------------------------------------------------

" When this option is set to 1, YCM will auto-close the preview window after
" the user leaves insert mode.
let g:ycm_autoclose_preview_window_after_insertion = 1

" " -----------------------------------------------------------------------------
" " SYNTASTIC
" " -----------------------------------------------------------------------------

" " The default settings recommended by vim-syntastic
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0

" let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
" nnoremap <C-w>E :SyntasticCheck<CR> :SyntasticToggleMode<CR>

" -----------------------------------------------------------------------------
" VIM OPERATOR FLASHY
" -----------------------------------------------------------------------------

" Flash yanked text
map y <Plug>(operator-flashy)
nmap Y <Plug>(operator-flashy)$

" set flash time to 300ms
let g:operator#flashy#flash_time = 300

" -----------------------------------------------------------------------------
" ULTISNIPS
" -----------------------------------------------------------------------------

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-h>"
let g:UltiSnipsListSnippets="<c-l>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" -----------------------------------------------------------------------------
" VIM-INDEX-SEARCH
" -----------------------------------------------------------------------------
let g:indexed_search_dont_move=1
let g:indexed_search_numbered_only=1

" -----------------------------------------------------------------------------
" VIM-SMOOTH-SCROLL
" -----------------------------------------------------------------------------
"  Note that relative numbering is disabled during the actual scrolling to
"  improve performance.
noremap <silent> <c-u> :set nornu <bar>
   \ :call smooth_scroll#up(&scroll, 15, 2)<CR> <bar>
   \ :set rnu<CR>
noremap <silent> <c-d> :set nornu <bar>
   \ :call smooth_scroll#down(&scroll, 15, 2)<CR> <bar>
   \ :set rnu<CR>
noremap <silent> <c-b> :set nornu <bar>
   \ :call smooth_scroll#up(&scroll*2, 15, 4)<CR> <bar>
   \ :set rnu<CR>
noremap <silent> <c-f> :set nornu <bar>
   \ :call smooth_scroll#down(&scroll*2, 15, 4)<CR> <bar>
   \ :set rnu<CR>

" -----------------------------------------------------------------------------
" VIM-TMUX
" -----------------------------------------------------------------------------

let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <c-a>h :TmuxNavigateLeft<cr>
nnoremap <silent> <c-a>j :TmuxNavigateDown<cr>
nnoremap <silent> <c-a>k :TmuxNavigateUp<cr>
nnoremap <silent> <c-a>l :TmuxNavigateRight<cr>
nnoremap <silent> <c-a>\ :TmuxNavigatePrevious<cr>


" -----------------------------------------------------------------------------
" VIM-OVER
" -----------------------------------------------------------------------------

" enable vim-over by default:
cabbrev %s OverCommandLine<cr>%s
cabbrev '<,'>s OverCommandLine<cr>'<,'>s

" -----------------------------------------------------------------------------
" GIT GUTTER
" -----------------------------------------------------------------------------

" update defaults to avoid clashes with other custom leader mappings
" (I don't actually use these, just set here to free space for other leader
" commands)
nmap <Leader>gs <Plug>GitGutterStageHunk
nmap <Leader>gu <Plug>GitGutterUndoHunk
nmap <Leader>gp <Plug>GitGutterPreviewHunk

